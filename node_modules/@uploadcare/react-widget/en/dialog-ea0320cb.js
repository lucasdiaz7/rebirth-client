import { b as _slicedToArray, c as _objectSpread2, e as _createForOfIteratorHelper } from './index-51cb9d7c.js';
import React, { useRef, useEffect, useImperativeHandle } from 'react';
import uploadcare from 'uploadcare-widget/uploadcare.lang.en';
import { u as useEventCallback, a as useCustomTabs, b as useDeepEffect } from './use-deep-effect-51443bd2.js';
import 'react-fast-compare';
import '@uploadcare/client-suspense';

var containerStyles = {
  height: '500px',
  display: 'flex',
  flexDirection: 'column',
  alignItems: 'center',
  justifyContent: 'center'
};
var hiddenDoneButtonStyle =
/* css */
"\n  .uploadcare--preview__done, .uploadcare--panel__done {\n    display: none;\n  }\n";

var useDialog = function useDialog(props, uploadcare) {
  var _props$value = props.value,
      value = _props$value === void 0 ? [] : _props$value,
      apiRef = props.apiRef,
      customTabs = props.customTabs,
      tabsCss = props.tabsCss,
      locale = props.locale,
      localeTranslations = props.localeTranslations,
      localePluralize = props.localePluralize,
      onTabChange = props.onTabChange,
      onChange = props.onChange,
      onProgress = props.onProgress;
  var panelContainer = useRef(null);
  var panelInstance = useRef(null);
  var onTabChangeCallback = useEventCallback(onTabChange);
  var onChangeCallback = useEventCallback(onChange);
  var onProgressCallback = useEventCallback(onProgress);
  useCustomTabs(customTabs, uploadcare);
  useDeepEffect(function () {
    if (locale) window.UPLOADCARE_LOCALE = locale;
    if (localePluralize) window.UPLOADCARE_LOCALE_PLURALIZE = localePluralize;

    if (localeTranslations) {
      window.UPLOADCARE_LOCALE_TRANSLATIONS = localeTranslations;
    }

    return function () {
      if (locale) delete window.UPLOADCARE_LOCALE;
      if (localePluralize) delete window.UPLOADCARE_LOCALE_PLURALIZE;
      if (localeTranslations) delete window.UPLOADCARE_LOCALE_TRANSLATIONS;
    };
  }, [locale, localePluralize, localeTranslations]);
  useEffect(function () {
    if (uploadcare && tabsCss && typeof tabsCss === 'string') {
      if (tabsCss.indexOf('https://') === 0) {
        uploadcare.tabsCss.addUrl(tabsCss);
      } else {
        uploadcare.tabsCss.addStyle(tabsCss);
      }
    }
  }, [uploadcare, tabsCss]);
  useEffect(function () {
    var files = Array.isArray(value) ? value : [value];
    panelInstance.current && panelInstance.current.reject();
    panelInstance.current = uploadcare.openPanel(panelContainer.current, files, _objectSpread2(_objectSpread2({
      multipleMax: props.multiple ? undefined : 1
    }, props), {}, {
      multiple: true
    })); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [uploadcare, props]);
  useEffect(function () {
    var dialogApi = panelInstance.current;
    dialogApi.progress(onTabChangeCallback);

    var onChangeWrapper = function onChangeWrapper() {
      var items = panelInstance.current.fileColl.__items.map(function (deferred) {
        return deferred.promise();
      });

      onChangeCallback(items);
    };

    var onProgressWrapper = function onProgressWrapper() {
      var lastProgresses = panelInstance.current.fileColl.lastProgresses();
      onProgressCallback(lastProgresses);
    };

    dialogApi.fileColl.anyProgressList.add(onProgressWrapper);
    dialogApi.fileColl.anyDoneList.add(onChangeWrapper);
    dialogApi.fileColl.anyFailList.add(onChangeWrapper);
    dialogApi.fileColl.onRemove.add(onChangeWrapper);
    dialogApi.fileColl.onReplace.add(onChangeWrapper);
    dialogApi.fileColl.onSort.add(onChangeWrapper);
    return function () {
      var dialogApi = panelInstance.current;
      dialogApi.fileColl.anyProgressList.remove(onProgressWrapper);
      dialogApi.fileColl.anyDoneList.remove(onChangeWrapper);
      dialogApi.fileColl.anyFailList.remove(onChangeWrapper);
      dialogApi.fileColl.onRemove.remove(onChangeWrapper);
      dialogApi.fileColl.onReplace.remove(onChangeWrapper);
      dialogApi.fileColl.onSort.remove(onChangeWrapper);
    };
  }, [onTabChangeCallback, onChangeCallback, onProgressCallback]);
  useImperativeHandle(apiRef, function () {
    return {
      onTabVisibility: function onTabVisibility(cb) {
        return panelInstance.current.onTabVisibility(cb);
      },
      hideTab: function hideTab(tab) {
        return panelInstance.current.hideTab(tab);
      },
      showTab: function showTab(tab) {
        return panelInstance.current.showTab(tab);
      },
      switchTab: function switchTab(tab) {
        return panelInstance.current.switchTab(tab);
      },
      addFiles: function addFiles(files) {
        return panelInstance.current.addFiles(files);
      },
      isTabVisible: function isTabVisible(tab) {
        return panelInstance.current.isTabVisible(tab);
      },
      getFileColl: function getFileColl() {
        return panelInstance.current.fileColl;
      },
      getRawDialogApi: function getRawDialogApi() {
        return panelInstance.current;
      }
    };
  }, []);
  useEffect(function () {
    return function () {
      return panelInstance.current && panelInstance.current.reject();
    };
  }, []);
  useEffect(function () {
    var isUpdated = false;
    panelInstance.current.fileColl.clear();

    var _iterator = _createForOfIteratorHelper(value),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var item = _step.value;

        if (typeof item === 'string' && item.includes('~')) {
          uploadcare.loadFileGroup(item, props).then(function (fileGroup) {
            // value could be changed after group loaded
            if (!isUpdated) {
              var files = fileGroup.files();
              panelInstance.current.addFiles(files);
            }
          });
          break;
        }

        panelInstance.current.fileColl.add(uploadcare.fileFrom('uploaded', item, props));
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    return function () {
      isUpdated = true;
    }; // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [value]);
  return [panelContainer];
};

var Dialog = function Dialog(props) {
  var _useDialog = useDialog(props, uploadcare),
      _useDialog2 = _slicedToArray(_useDialog, 1),
      containerRef = _useDialog2[0];

  return /*#__PURE__*/React.createElement("div", {
    id: props.id,
    style: containerStyles
  }, /*#__PURE__*/React.createElement("style", null, hiddenDoneButtonStyle), /*#__PURE__*/React.createElement("div", {
    ref: containerRef
  }));
};

export { Dialog as default };
