{"ast":null,"code":"// Unique ID creation requires a high quality random # generator.  We feature\n// detect to determine the best RNG source, normalizing to a function that\n// returns 128-bits of randomness, since that's what's usually required\nvar rng = require('./lib/rng');\n\nvar bytesToUuid = require('./lib/bytesToUuid'); // **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n// random #'s we need to init node and clockseq\n\n\nvar _seedBytes = rng(); // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n\n\nvar _nodeId = [_seedBytes[0] | 0x01, _seedBytes[1], _seedBytes[2], _seedBytes[3], _seedBytes[4], _seedBytes[5]]; // Per 4.2.2, randomize (14 bit) clockseq\n\nvar _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 0x3fff; // Previous uuid creation time\n\n\nvar _lastMSecs = 0,\n    _lastNSecs = 0; // See https://github.com/broofa/node-uuid for API details\n\nfunction v1(options, buf, offset) {\n  var i = buf && offset || 0;\n  var b = buf || [];\n  options = options || {};\n  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n\n  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime(); // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n\n  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)\n\n  var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression\n\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n\n\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  } // Per 4.2.1.2 Throw error if too many uuids are requested\n\n\n  if (nsecs >= 10000) {\n    throw new Error('uuid.v1(): Can\\'t create more than 10M uuids/sec');\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n\n  msecs += 12219292800000; // `time_low`\n\n  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff; // `time_mid`\n\n  var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff; // `time_high_and_version`\n\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n\n  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n\n  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`\n\n  b[i++] = clockseq & 0xff; // `node`\n\n  var node = options.node || _nodeId;\n\n  for (var n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf ? buf : bytesToUuid(b);\n}\n\nmodule.exports = v1;","map":{"version":3,"names":["rng","require","bytesToUuid","_seedBytes","_nodeId","_clockseq","_lastMSecs","_lastNSecs","v1","options","buf","offset","i","b","clockseq","undefined","msecs","Date","getTime","nsecs","dt","Error","tl","tmh","node","n","module","exports"],"sources":["C:/Backup/Desktop/LUCAS/henry/PROYECTO FINAL/PF-Rebirth/PF-Rebirth/client/node_modules/mercadopago/node_modules/uuid/v1.js"],"sourcesContent":["// Unique ID creation requires a high quality random # generator.  We feature\n// detect to determine the best RNG source, normalizing to a function that\n// returns 128-bits of randomness, since that's what's usually required\nvar rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\n// random #'s we need to init node and clockseq\nvar _seedBytes = rng();\n\n// Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\nvar _nodeId = [\n  _seedBytes[0] | 0x01,\n  _seedBytes[1], _seedBytes[2], _seedBytes[3], _seedBytes[4], _seedBytes[5]\n];\n\n// Per 4.2.2, randomize (14 bit) clockseq\nvar _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 0x3fff;\n\n// Previous uuid creation time\nvar _lastMSecs = 0, _lastNSecs = 0;\n\n// See https://github.com/broofa/node-uuid for API details\nfunction v1(options, buf, offset) {\n  var i = buf && offset || 0;\n  var b = buf || [];\n\n  options = options || {};\n\n  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;\n\n  // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();\n\n  // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;\n\n  // Time since last uuid creation (in msecs)\n  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;\n\n  // Per 4.2.1.2, Bump clockseq on clock regression\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  }\n\n  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  }\n\n  // Per 4.2.1.2 Throw error if too many uuids are requested\n  if (nsecs >= 10000) {\n    throw new Error('uuid.v1(): Can\\'t create more than 10M uuids/sec');\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq;\n\n  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n  msecs += 12219292800000;\n\n  // `time_low`\n  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff;\n\n  // `time_mid`\n  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff;\n\n  // `time_high_and_version`\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n  b[i++] = tmh >>> 16 & 0xff;\n\n  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n  b[i++] = clockseq >>> 8 | 0x80;\n\n  // `clock_seq_low`\n  b[i++] = clockseq & 0xff;\n\n  // `node`\n  var node = options.node || _nodeId;\n  for (var n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf ? buf : bytesToUuid(b);\n}\n\nmodule.exports = v1;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}