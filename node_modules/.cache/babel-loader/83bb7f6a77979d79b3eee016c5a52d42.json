{"ast":null,"code":"var Promise = require('bluebird');\n\nvar preConditions = require('../precondition'); // Private variables to hide them from the integrator\n\n\nvar requestManager;\nvar execOptions;\n\nvar mercadopagoError = function mercadopagoError(message, cause, status, idempotencyId, options, requestManagerInjection) {\n  this.name = 'MercadoPagoError';\n  this.message = message || 'Unknown Error';\n  this.cause = cause || 'Unknown Cause';\n  this.status = status || 500;\n  this.idempotency = idempotencyId;\n  execOptions = options;\n  requestManager = requestManagerInjection;\n  Error.captureStackTrace(this, mercadopagoError);\n};\n/*\n * Execute request using the requestManager and execOptions\n * @param resolve\n * @param reject\n * @param callback\n * @returns {*}\n */\n\n\nvar executeRequest = function (resolve, reject, callback) {\n  callback = preConditions.getCallback(callback);\n  return requestManager.generateAccessToken().then(function () {\n    return requestManager.exec(execOptions);\n  }).then(function (response) {\n    resolve(response);\n    return callback.apply(null, [null, response]);\n  }).catch(function (err) {\n    reject(err);\n    return callback.apply(null, [err, null]);\n  });\n};\n\nmercadopagoError.prototype = Object.create(Error.prototype);\nmercadopagoError.prototype.constructor = mercadopagoError;\n\nmercadopagoError.prototype.retry = function (callback) {\n  var error;\n  callback = preConditions.getCallback(callback);\n  return new Promise(function (resolve, reject) {\n    if (!execOptions && !requestManager) {\n      error = new Error('Cant retry this operation');\n      reject(error);\n      return callback.apply(null, [error, null]);\n    } // Retry the same request\n\n\n    return executeRequest(resolve, reject, callback);\n  });\n};\n\nmodule.exports = mercadopagoError;","map":{"version":3,"names":["Promise","require","preConditions","requestManager","execOptions","mercadopagoError","message","cause","status","idempotencyId","options","requestManagerInjection","name","idempotency","Error","captureStackTrace","executeRequest","resolve","reject","callback","getCallback","generateAccessToken","then","exec","response","apply","catch","err","prototype","Object","create","constructor","retry","error","module","exports"],"sources":["C:/Backup/Desktop/LUCAS/henry/PROYECTO FINAL/PF-Rebirth/PF-Rebirth/client/node_modules/mercadopago/lib/utils/mercadopagoError.js"],"sourcesContent":["var Promise = require('bluebird');\nvar preConditions = require('../precondition');\n\n// Private variables to hide them from the integrator\nvar requestManager;\nvar execOptions;\n\nvar mercadopagoError = function mercadopagoError(message, cause, status, idempotencyId, options, requestManagerInjection) {\n  this.name = 'MercadoPagoError';\n  this.message = message || 'Unknown Error';\n  this.cause = cause || 'Unknown Cause';\n  this.status = status || 500;\n  this.idempotency = idempotencyId;\n\n  execOptions = options;\n  requestManager = requestManagerInjection;\n\n  Error.captureStackTrace(this, mercadopagoError);\n};\n\n/*\n * Execute request using the requestManager and execOptions\n * @param resolve\n * @param reject\n * @param callback\n * @returns {*}\n */\nvar executeRequest = function (resolve, reject, callback) {\n  callback = preConditions.getCallback(callback);\n\n  return requestManager.generateAccessToken().then(function () {\n    return requestManager.exec(execOptions);\n  }).then(function (response) {\n    resolve(response);\n    return callback.apply(null, [null, response]);\n  }).catch(function (err) {\n    reject(err);\n    return callback.apply(null, [err, null]);\n  });\n};\n\nmercadopagoError.prototype = Object.create(Error.prototype);\nmercadopagoError.prototype.constructor = mercadopagoError;\n\nmercadopagoError.prototype.retry = function (callback) {\n  var error;\n\n  callback = preConditions.getCallback(callback);\n\n  return new Promise(function (resolve, reject) {\n    if (!execOptions && !requestManager) {\n      error = new Error('Cant retry this operation');\n      reject(error);\n      return callback.apply(null, [error, null]);\n    }\n\n    // Retry the same request\n    return executeRequest(resolve, reject, callback);\n  });\n};\n\nmodule.exports = mercadopagoError;\n"],"mappings":"AAAA,IAAIA,OAAO,GAAGC,OAAO,CAAC,UAAD,CAArB;;AACA,IAAIC,aAAa,GAAGD,OAAO,CAAC,iBAAD,CAA3B,C,CAEA;;;AACA,IAAIE,cAAJ;AACA,IAAIC,WAAJ;;AAEA,IAAIC,gBAAgB,GAAG,SAASA,gBAAT,CAA0BC,OAA1B,EAAmCC,KAAnC,EAA0CC,MAA1C,EAAkDC,aAAlD,EAAiEC,OAAjE,EAA0EC,uBAA1E,EAAmG;EACxH,KAAKC,IAAL,GAAY,kBAAZ;EACA,KAAKN,OAAL,GAAeA,OAAO,IAAI,eAA1B;EACA,KAAKC,KAAL,GAAaA,KAAK,IAAI,eAAtB;EACA,KAAKC,MAAL,GAAcA,MAAM,IAAI,GAAxB;EACA,KAAKK,WAAL,GAAmBJ,aAAnB;EAEAL,WAAW,GAAGM,OAAd;EACAP,cAAc,GAAGQ,uBAAjB;EAEAG,KAAK,CAACC,iBAAN,CAAwB,IAAxB,EAA8BV,gBAA9B;AACD,CAXD;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIW,cAAc,GAAG,UAAUC,OAAV,EAAmBC,MAAnB,EAA2BC,QAA3B,EAAqC;EACxDA,QAAQ,GAAGjB,aAAa,CAACkB,WAAd,CAA0BD,QAA1B,CAAX;EAEA,OAAOhB,cAAc,CAACkB,mBAAf,GAAqCC,IAArC,CAA0C,YAAY;IAC3D,OAAOnB,cAAc,CAACoB,IAAf,CAAoBnB,WAApB,CAAP;EACD,CAFM,EAEJkB,IAFI,CAEC,UAAUE,QAAV,EAAoB;IAC1BP,OAAO,CAACO,QAAD,CAAP;IACA,OAAOL,QAAQ,CAACM,KAAT,CAAe,IAAf,EAAqB,CAAC,IAAD,EAAOD,QAAP,CAArB,CAAP;EACD,CALM,EAKJE,KALI,CAKE,UAAUC,GAAV,EAAe;IACtBT,MAAM,CAACS,GAAD,CAAN;IACA,OAAOR,QAAQ,CAACM,KAAT,CAAe,IAAf,EAAqB,CAACE,GAAD,EAAM,IAAN,CAArB,CAAP;EACD,CARM,CAAP;AASD,CAZD;;AAcAtB,gBAAgB,CAACuB,SAAjB,GAA6BC,MAAM,CAACC,MAAP,CAAchB,KAAK,CAACc,SAApB,CAA7B;AACAvB,gBAAgB,CAACuB,SAAjB,CAA2BG,WAA3B,GAAyC1B,gBAAzC;;AAEAA,gBAAgB,CAACuB,SAAjB,CAA2BI,KAA3B,GAAmC,UAAUb,QAAV,EAAoB;EACrD,IAAIc,KAAJ;EAEAd,QAAQ,GAAGjB,aAAa,CAACkB,WAAd,CAA0BD,QAA1B,CAAX;EAEA,OAAO,IAAInB,OAAJ,CAAY,UAAUiB,OAAV,EAAmBC,MAAnB,EAA2B;IAC5C,IAAI,CAACd,WAAD,IAAgB,CAACD,cAArB,EAAqC;MACnC8B,KAAK,GAAG,IAAInB,KAAJ,CAAU,2BAAV,CAAR;MACAI,MAAM,CAACe,KAAD,CAAN;MACA,OAAOd,QAAQ,CAACM,KAAT,CAAe,IAAf,EAAqB,CAACQ,KAAD,EAAQ,IAAR,CAArB,CAAP;IACD,CAL2C,CAO5C;;;IACA,OAAOjB,cAAc,CAACC,OAAD,EAAUC,MAAV,EAAkBC,QAAlB,CAArB;EACD,CATM,CAAP;AAUD,CAfD;;AAiBAe,MAAM,CAACC,OAAP,GAAiB9B,gBAAjB"},"metadata":{},"sourceType":"script"}