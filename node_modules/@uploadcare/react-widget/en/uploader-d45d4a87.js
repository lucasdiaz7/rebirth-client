import { _ as _extends, a as _objectWithoutProperties, b as _slicedToArray, c as _objectSpread2, d as _defineProperty } from './index-51cb9d7c.js';
import React, { useEffect, useRef, useCallback, useImperativeHandle } from 'react';
import uploadcare from 'uploadcare-widget/uploadcare.lang.en';
import { u as useEventCallback, a as useCustomTabs, b as useDeepEffect } from './use-deep-effect-51443bd2.js';
import isEqual from 'react-fast-compare';
import '@uploadcare/client-suspense';

var useValidators = function useValidators(widget, validators) {
  useEffect(function () {
    if (validators != null) {
      var instance = widget.current;
      validators.forEach(function (validator) {
        instance.validators.push(validator);
      });
      return function () {
        instance.validators.length = 0;
      };
    }
  }, [widget, validators]);
};

function useDeepMemo(factory, deps) {
  var isValid = true;
  var valueRef = useRef(); // initial hook call

  if (!valueRef.current) {
    valueRef.current = {
      deps: deps,
      result: factory()
    }; // subsequent calls
  } else {
    isValid = !!(deps && valueRef.current.deps && isEqual(deps, valueRef.current.deps));
  }

  var cache = isValid ? valueRef.current : {
    deps: deps,
    result: factory()
  }; // must update immediately so any sync renders here don't cause an infinite loop

  valueRef.current = cache;
  return cache.result;
}

var _excluded = ["id", "name", "value", "onFileSelect", "onChange", "onDialogOpen", "onDialogClose", "onTabChange", "apiRef", "customTabs", "validators", "tabsCss", "locale", "localeTranslations", "localePluralize", "previewUrlCallback"];

function camelCaseToDash(str) {
  return str.replace(/([a-zA-Z])(?=[A-Z])/g, '$1-').toLowerCase();
}

var propsToAttr = function propsToAttr(props) {
  return Object.entries(props).reduce(function (attr, _ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        key = _ref2[0],
        value = _ref2[1];

    return _objectSpread2(_objectSpread2({}, attr), {}, _defineProperty({}, "data-".concat(camelCaseToDash(key)), value));
  }, {});
};

var useWidget = function useWidget(_ref3, uploadcare) {
  var id = _ref3.id,
      name = _ref3.name,
      value = _ref3.value,
      onFileSelect = _ref3.onFileSelect,
      onChange = _ref3.onChange,
      onDialogOpen = _ref3.onDialogOpen,
      onDialogClose = _ref3.onDialogClose,
      onTabChange = _ref3.onTabChange,
      apiRef = _ref3.apiRef,
      customTabs = _ref3.customTabs,
      validators = _ref3.validators,
      tabsCss = _ref3.tabsCss,
      locale = _ref3.locale,
      localeTranslations = _ref3.localeTranslations,
      localePluralize = _ref3.localePluralize,
      previewUrlCallback = _ref3.previewUrlCallback,
      options = _objectWithoutProperties(_ref3, _excluded);

  var input = useRef(null);
  var widget = useRef(null);
  var cachedValueRef = useRef(null);
  var fileSelectedCallback = useEventCallback(onFileSelect);
  var changeCallback = useEventCallback(onChange);
  var dialogOpenCallback = useEventCallback(onDialogOpen);
  var dialogCloseCallback = useEventCallback(onDialogClose);
  var tabChangeCallback = useEventCallback(onTabChange);
  useCustomTabs(customTabs, uploadcare);
  var attributes = useDeepMemo(function () {
    return propsToAttr(options);
  }, [options]);
  useDeepEffect(function () {
    if (locale) window.UPLOADCARE_LOCALE = locale;
    if (localePluralize) window.UPLOADCARE_LOCALE_PLURALIZE = localePluralize;

    if (localeTranslations) {
      window.UPLOADCARE_LOCALE_TRANSLATIONS = localeTranslations;
    }

    if (previewUrlCallback) {
      window.UPLOADCARE_PREVIEW_URL_CALLBACK = previewUrlCallback;
    }

    uploadcare.plugin(function (internal) {
      internal.locale.rebuild({
        locale: locale || null,
        localeTranslations: localeTranslations || null,
        localePluralize: localePluralize || null
      });
    });
    return function () {
      if (locale) delete window.UPLOADCARE_LOCALE;
      if (localePluralize) delete window.UPLOADCARE_LOCALE_PLURALIZE;
      if (localeTranslations) delete window.UPLOADCARE_LOCALE_TRANSLATIONS;
      if (previewUrlCallback) delete window.UPLOADCARE_PREVIEW_URL_CALLBACK;
    };
  }, [locale, localeTranslations, localePluralize, previewUrlCallback]);
  useEffect(function () {
    var inputEl = input.current;
    widget.current = uploadcare.Widget(inputEl);
    var widgetElement = inputEl.nextSibling;

    if (cachedValueRef.current) {
      // restore widget value when called twice in React.StrictMode
      widget.current.value(cachedValueRef.current);
    }

    return function () {
      // useEffect could be called twice inside React.StrictMode
      // to reinitialize widget on the same input element, we need to cleanup bounded jquery data on it
      // `uploadcareWidget` is a data attr that is used to store widget api
      // see https://github.com/uploadcare/uploadcare-widget/blob/feat/unsplash-tab/src/widget/live.js#L11
      uploadcare.jQuery(inputEl).removeData('uploadcareWidget');
      widgetElement && widgetElement.remove();
    };
  }, [uploadcare, attributes]);
  useValidators(widget, validators);
  useEffect(function () {
    widget.current.onUploadComplete.add(changeCallback);
    widget.current.onChange.add(fileSelectedCallback);
    return function () {
      widget.current.onUploadComplete.remove(changeCallback);
      widget.current.onChange.remove(fileSelectedCallback);
    };
  }, [changeCallback, fileSelectedCallback, uploadcare, attributes]);
  useEffect(function () {
    var dialog;

    var saveDialog = function saveDialog(ref) {
      dialog = ref;
      dialog.done(dialogCloseCallback).fail(dialogCloseCallback).progress(tabChangeCallback);
      dialogOpenCallback(ref);
    };

    widget.current.onDialogOpen.add(saveDialog);
    return function () {
      widget.current.onDialogOpen.remove(saveDialog);
      dialog && dialog.reject();
    };
  }, [attributes, dialogCloseCallback, dialogOpenCallback, tabChangeCallback]);
  useEffect(function () {
    var files = [];

    var saveFiles = function saveFiles(file) {
      if (file) {
        files = file.files ? file.files() : [file];
      } else {
        files = [];
      }
    };

    widget.current.onChange.add(saveFiles);
    return function () {
      files.forEach(function (file) {
        return file.cancel();
      });
      widget.current.onChange.remove(saveFiles);
    };
  }, [attributes]);
  useEffect(function () {
    if (cachedValueRef.current !== value) {
      widget.current.value(value);
    }

    cachedValueRef.current = value;
  }, [value]);
  useEffect(function () {
    if (uploadcare && tabsCss && typeof tabsCss === 'string') {
      if (tabsCss.indexOf('https://') === 0) {
        uploadcare.tabsCss.addUrl(tabsCss);
      } else {
        uploadcare.tabsCss.addStyle(tabsCss);
      }
    }
  }, [uploadcare, tabsCss]);
  useImperativeHandle(apiRef, function () {
    return {
      openDialog: function openDialog() {
        return widget.current.openDialog();
      },
      reloadInfo: function reloadInfo() {
        return widget.current.reloadInfo();
      },
      getInput: function getInput() {
        return widget.current.inputElement;
      }
    };
  }, []);
  return useCallback(function () {
    return /*#__PURE__*/React.createElement("input", _extends({
      type: "hidden",
      ref: input,
      id: id,
      name: name
    }, attributes));
  }, [attributes, id, name]);
};

var Uploader = function Uploader(props) {
  var Input = useWidget(props, uploadcare);
  return /*#__PURE__*/React.createElement(Input, null);
};

export { Uploader as default };
